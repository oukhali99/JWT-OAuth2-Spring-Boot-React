AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for JWT-OAuth2-Spring-Boot-React application'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment name

  VpcCIDR:
    Type: String
    Default: 172.30.0.0/16
    Description: CIDR block for the VPC

  DatabaseName:
    Type: String
    Default: oauth2db
    Description: Name of the database

  DatabaseUsername:
    Type: String
    Default: postgres
    Description: Database admin username

  DatabasePassword:
    Type: String
    NoEcho: true
    Description: Database admin password
    MinLength: 8

  GoogleClientId:
    Type: String
    Description: Google OAuth2 Client ID

  GoogleClientSecret:
    Type: String
    NoEcho: true
    Description: Google OAuth2 Client Secret

  GoogleRedirectUri:
    Type: String
    Description: Google OAuth2 Redirect URI

  SpringSecuritySecretKey:
    Type: String
    NoEcho: true
    Description: Spring Security Secret Key

  FrontendUrl:
    Type: String
    Description: Frontend URL

  GitHubConnectionArn:
    Type: String
    Description: GitHub Connection ARN

Resources:
  # VPC and Network Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-vpc-${AWS::StackName}

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!Ref VpcCIDR, 6, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-public-subnet-1-${AWS::StackName}

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!Ref VpcCIDR, 6, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-private-subnet-1-${AWS::StackName}

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Cidr [!Ref VpcCIDR, 6, 8]]
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-private-subnet-2-${AWS::StackName}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-igw-${AWS::StackName}

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-public-route-table-${AWS::StackName}

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # RDS Instance
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      DBName: !Ref DatabaseName
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      MultiAZ: false
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-db-instance-${AWS::StackName}

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-db-subnet-group-${AWS::StackName}

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref BackendSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-db-security-group-${AWS::StackName}

  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-backend-security-group-${AWS::StackName}

  # Elastic Beanstalk Application
  ElasticBeanstalkApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: !Sub ${Environment}-jwt-oauth2-app-${AWS::StackName}
      Description: JWT OAuth2 Spring Boot React Application

  # Elastic Beanstalk Environment
  ElasticBeanstalkEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      EnvironmentName: !Sub ${Environment}-env-${AWS::StackName}
      SolutionStackName: 64bit Amazon Linux 2023 v4.5.1 running Corretto 21
      OptionSettings:
        # VPC and Subnet Configuration
        - Namespace: aws:ec2:vpc
          OptionName: VPCId
          Value: !Ref VPC
        - Namespace: aws:ec2:vpc
          OptionName: Subnets
          Value: !Ref PublicSubnet1
        - Namespace: aws:ec2:vpc
          OptionName: AssociatePublicIpAddress
          Value: true
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: EnvironmentType
          Value: SingleInstance
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: PORT
          Value: '8080'
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: POSTGRES_HOST
          Value: !GetAtt DBInstance.Endpoint.Address
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: POSTGRES_USER
          Value: !Ref DatabaseUsername
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: POSTGRES_PASSWORD
          Value: !Ref DatabasePassword
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: POSTGRES_DB
          Value: !Ref DatabaseName
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: SPRING_SECURITY_SECRET_KEY
          Value: !Ref SpringSecuritySecretKey
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: GOOGLE_CLIENT_ID
          Value: !Ref GoogleClientId
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: GOOGLE_CLIENT_SECRET
          Value: !Ref GoogleClientSecret
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: GOOGLE_REDIRECT_URI
          Value: !Ref GoogleRedirectUri
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: FRONTEND_URL
          Value: !Ref FrontendUrl
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !Ref ElasticBeanstalkInstanceProfile
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: SecurityGroups
          Value: !Ref BackendSecurityGroup
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: DisableDefaultEC2SecurityGroup
          Value: true
        - Namespace: aws:ec2:instances
          OptionName: InstanceTypes
          Value: t3.nano
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: JAVA_OPTS
          Value: "-Xms256m -Xmx512m"
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: JVM_OPTIONS
          Value: "-Xms256m -Xmx512m"

  # IAM Role for Elastic Beanstalk
  ElasticBeanstalkInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ElasticBeanstalkRole

  ElasticBeanstalkRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AdministratorAccess-AWSElasticBeanstalk
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Environment}-pipeline-artifacts-jwt-oauth2-spring-boot-react

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: oukhali99/JWT-OAuth2-Spring-Boot-React
                BranchName: main
                DetectChanges: true
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: BuildWithMaven
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: DeployToEBS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ElasticBeanstalk
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ApplicationName: !Ref ElasticBeanstalkApplication
                EnvironmentName: !Sub ${Environment}-env-${AWS::StackName}
              RunOrder: 1
                
Outputs:
  DatabaseEndpoint:
    Description: Database endpoint
    Value: !GetAtt DBInstance.Endpoint.Address

  DatabasePort:
    Description: Database port
    Value: !GetAtt DBInstance.Endpoint.Port

  ApplicationURL:
    Description: URL of the Elastic Beanstalk environment
    Value: !Sub http://${ElasticBeanstalkEnvironment.EndpointURL}

  EnvironmentName:
    Description: Name of the Elastic Beanstalk environment
    Value: !Ref ElasticBeanstalkEnvironment

  ApplicationName:
    Description: Name of the Elastic Beanstalk application
    Value: !Ref ElasticBeanstalkApplication